from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from .config import _ProfileStatesGroup, check_user
from ..bot_config import dp
from ..keyboards import get_tournaments_kb
from database import (Database,
                      PROMPT_VIEW_USERS,
                      get_prompt_update_nickname,
                      get_prompt_view_user_tournaments)
from googlesheets import Users, Rating



# writing the internal nickname
@dp.message_handler(Text(equals='üë®‚Äçüíº–í–≤–µ—Å—Ç–∏ –Ω–∏–∫'))
@dp.message_handler(Command('nickname'))
@check_user
async def write_nickname(message: types.Message, *args) -> None:
    await _ProfileStatesGroup.get_nickname.set()
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–ª–µ–µ –≤–æ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
    )


# get the internal nickname
@dp.message_handler(state=_ProfileStatesGroup.get_nickname)
async def get_nickname(message: types.Message, state: FSMContext) -> None:
    nickname = message.text
    user_chat_id = str(message.chat.id)

    db = Database()
    all_users = db.get_data_list(PROMPT_VIEW_USERS)

    nicknames = {}
    for user in all_users:
        nicknames[user['chat_id']] = user['nickname']

    if nickname in list(nicknames.values()):
        await message.answer(
            '‚ùå‚ùå–¢–∞–∫–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π'
        )
        await state.finish()
        return
    
    try: old_nick = nicknames[user_chat_id]
    except KeyError: old_nick = None

    u = Users()             # update the nickname in users table 
    u.update_nickname(new_nick=nickname, chat_id=user_chat_id)     
    if old_nick:
        p = Rating()        # update the nickname in users table
        p.update_nickname(new_nick=nickname, old_nick=old_nick)

    prompts = get_prompt_update_nickname(    # update the nickname in the databases
        user_chat_id, new_nick=nickname, old_nick=old_nick
    )
    db.action(*prompts)

    await state.finish()
    await message.answer("‚úÖ–ü—Å–µ–≤–¥–æ–Ω–∏–º –∑–∞–ø–∏—Å–∞–Ω")



# open the tournament games with the coefficients
@dp.message_handler(Text(equals='‚öΩÔ∏èüèÄüéæ –¢–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã'))
@dp.message_handler(Command('current_tournaments'))
@check_user
async def current_tournaments(message: types.Message,
                              db: Database,
                              nickname: str) -> None:
    participants = [i['nickname'] for i in db.get_data_list(PROMPT_VIEW_USERS)]
    
    if nickname not in participants:
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ')
        return
    
    msg_text = f'üìã–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\nüìå–í–∞—à –Ω–∏–∫: {nickname}\n‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä‚¨áÔ∏è'
    data_ts = db.get_data_list(
        get_prompt_view_user_tournaments(nickname)
    )
    user_tournaments = [i['tournament'] for i in data_ts]
    await message.answer(
        text=msg_text, reply_markup=get_tournaments_kb(*user_tournaments)
    )