from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from .config import _ProfileStatesGroup, check_user
from ..bot_config import dp
from ..keyboards import get_tournaments_kb
from database import (Database,
                      PROMPT_VIEW_USERS,
                      get_prompt_update_nickname,
                      get_prompt_view_user_tournaments,
                      get_prompt_view_nickname)
from googlesheets import Users, Rating



# writing the internal nickname
@dp.message_handler(Text(equals='üë®‚Äçüíº –ò–∑–º–µ–Ω–∏—Ç—å –ù–∏–∫'))
@dp.message_handler(Command('nickname'))
@check_user
async def write_nickname(message: types.Message, *args) -> None:
    await _ProfileStatesGroup.get_nickname.set()
    await message.answer(
        'üí¨ –í–≤–µ–¥–∏—Ç–µ –ù–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
    )


# get the internal nickname
@dp.message_handler(state=_ProfileStatesGroup.get_nickname)
async def get_nickname(message: types.Message, state: FSMContext) -> None:
    nickname = message.text
    user_chat_id = str(message.chat.id)

    db = Database()
    all_users = db.get_data_list(PROMPT_VIEW_USERS)

    nicknames = [i['nickname'] for i in all_users]

    if nickname in nicknames:
        await message.answer(
            '‚ùå‚ùå–¢–∞–∫–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π'
        )
        await state.finish()
        return
    
    old_nick = db.get_data_list(
        get_prompt_view_nickname(user_chat_id)
    )[0]['nickname']

    u = Users()             # update the nickname in users table 
    u.update_nickname(new_nick=nickname, chat_id=user_chat_id)     
    r = Rating()            # update the nickname in users table
    r.update_nickname(new_nick=nickname, old_nick=old_nick)

    prompts = get_prompt_update_nickname(    # update the nickname in the databases
        user_chat_id, new_nick=nickname, old_nick=old_nick
    )
    db.action(*prompts)

    await state.finish()
    await message.answer("‚úÖ –ù–∏–∫ –ø—Ä–∏–Ω—è—Ç")



# open the tournament games with the coefficients
@dp.message_handler(Text(equals='‚öΩÔ∏èüèÄüéæ –¢–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã'))
@dp.message_handler(Command('current_tournaments'))
@check_user
async def current_tournaments(message: types.Message,
                              db: Database,
                              nickname: str) -> None:
    participants = [i['nickname'] for i in db.get_data_list(PROMPT_VIEW_USERS)]
    
    if nickname not in participants:
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ')
        return
    
    data_ts = db.get_data_list(
        get_prompt_view_user_tournaments(nickname)
    )
    if not data_ts:
        await message.answer(
            '‚ùóÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞—á–∞—Ç\nüó£ –û –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –í—ã –±—É–¥–µ—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã'
        )
        return
    
    user_tournaments = [i['tournament'] for i in data_ts]
    msg_text = f'üìã–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\nüìå–í–∞—à –ù–∏–∫: {nickname}\n‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä‚¨áÔ∏è'
    await message.answer(
        text=msg_text, reply_markup=get_tournaments_kb(*user_tournaments)
    )